Given a string s, return the longest palindromic substring in s.

 

Example 1:

Input: s = "babad"
Output: "bab"
Explanation: "aba" is also a valid answer.
Example 2:

Input: s = "cbbd"
Output: "bb"
 

Constraints:

1 <= s.length <= 1000
s consist of only digits and English letters.

class Solution(object):
    def longestPalindrome(self, s):
       
        start=0
        max_length=1
        n=len(s)
        for center in range(n):
            left=center
            right=center
            while  left>=0 and right<n and s[left]==s[right]:  
                if (right-left+1)>max_length:
                    start=left
                    max_length=right-left+1
                left-=1
                right+=1
            left=center
            right=center+1
            while  left>=0 and right<n and s[left]==s[right]:
                if (right-left+1)>max_length:
                    start=left
                    max_length=right-left+1
                left-=1
                right+=1
            result=""
            for i in range(start,start+max_length):
                result+=s[i]
        return result
